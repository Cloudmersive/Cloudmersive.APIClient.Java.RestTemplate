/*
 * nlpapiv2
 * The powerful Natural Language Processing APIs (v2) let you perform part of speech tagging, entity identification, sentence parsing, and much more to help you understand the meaning of unstructured text.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cloudmersive.client.rt;

import com.cloudmersive.client.rt.model.HateSpeechAnalysisRequest;
import com.cloudmersive.client.rt.model.HateSpeechAnalysisResponse;
import com.cloudmersive.client.rt.model.ProfanityAnalysisRequest;
import com.cloudmersive.client.rt.model.ProfanityAnalysisResponse;
import com.cloudmersive.client.rt.model.SentimentAnalysisRequest;
import com.cloudmersive.client.rt.model.SentimentAnalysisResponse;
import com.cloudmersive.client.rt.model.SimilarityAnalysisRequest;
import com.cloudmersive.client.rt.model.SimilarityAnalysisResponse;
import com.cloudmersive.client.rt.model.SubjectivityAnalysisRequest;
import com.cloudmersive.client.rt.model.SubjectivityAnalysisResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.springframework.web.client.RestClientException;

import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AnalyticsApi
 */
@Disabled
class AnalyticsApiTest {

    private final AnalyticsApi api = new AnalyticsApi();

    
    /**
     * Perform Hate Speech Analysis and Detection on Text
     *
     * Analyze input text using advanced Hate Speech Analysis to determine if the input contains hate speech language.  Supports English language input.  Consumes 1-2 API calls per sentence.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void analyticsHateSpeechTest() {
        HateSpeechAnalysisRequest input = null;

        HateSpeechAnalysisResponse response = api.analyticsHateSpeech(input);

        // TODO: test validations
    }
    
    /**
     * Perform Profanity and Obscene Language Analysis and Detection on Text
     *
     * Analyze input text using advanced Profanity and Obscene Language Analysis to determine if the input contains profane language.  Supports English language input.  Consumes 1-2 API calls per sentence.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void analyticsProfanityTest() {
        ProfanityAnalysisRequest input = null;

        ProfanityAnalysisResponse response = api.analyticsProfanity(input);

        // TODO: test validations
    }
    
    /**
     * Perform Sentiment Analysis and Classification on Text
     *
     * Analyze input text using advanced Sentiment Analysis to determine if the input is positive, negative, or neutral.  Supports English language input.  Consumes 1-2 API calls per sentence.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void analyticsSentimentTest() {
        SentimentAnalysisRequest input = null;

        SentimentAnalysisResponse response = api.analyticsSentiment(input);

        // TODO: test validations
    }
    
    /**
     * Perform Semantic Similarity Comparison of Two Strings
     *
     * Analyze two input text strings, typically sentences, and determine the semantic similarity of each.  Semantic similarity refers to the degree to which two sentences mean the same thing semantically.  Uses advanced Deep Learning to perform the semantic similarity comparison.  Consumes 1-2 API calls per sentence.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void analyticsSimilarityTest() {
        SimilarityAnalysisRequest input = null;

        SimilarityAnalysisResponse response = api.analyticsSimilarity(input);

        // TODO: test validations
    }
    
    /**
     * Perform Subjectivity and Objectivity Analysis on Text
     *
     * Analyze input text using advanced Subjectivity and Objectivity Language Analysis to determine if the input text is objective or subjective, and how much.  Supports English language input.  Consumes 1-2 API calls per sentence.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void analyticsSubjectivityTest() {
        SubjectivityAnalysisRequest input = null;

        SubjectivityAnalysisResponse response = api.analyticsSubjectivity(input);

        // TODO: test validations
    }
    
}
