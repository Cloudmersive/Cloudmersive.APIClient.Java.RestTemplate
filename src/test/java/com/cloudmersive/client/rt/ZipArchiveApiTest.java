/*
 * convertapi
 * Convert API lets you effortlessly convert file formats and types.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cloudmersive.client.rt;

import com.cloudmersive.client.rt.model.CreateZipArchiveRequest;
import java.io.File;
import com.cloudmersive.client.rt.model.ZipEncryptionAdvancedRequest;
import com.cloudmersive.client.rt.model.ZipExtractResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.springframework.web.client.RestClientException;

import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ZipArchiveApi
 */
@Disabled
class ZipArchiveApiTest {

    private final ZipArchiveApi api = new ZipArchiveApi();

    
    /**
     * Compress files to create a new zip archive
     *
     * Create a new zip archive by compressing input files.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void zipArchiveZipCreateTest() {
        org.springframework.core.io.Resource inputFile1 = null;
        org.springframework.core.io.Resource inputFile2 = null;
        org.springframework.core.io.Resource inputFile3 = null;
        org.springframework.core.io.Resource inputFile4 = null;
        org.springframework.core.io.Resource inputFile5 = null;
        org.springframework.core.io.Resource inputFile6 = null;
        org.springframework.core.io.Resource inputFile7 = null;
        org.springframework.core.io.Resource inputFile8 = null;
        org.springframework.core.io.Resource inputFile9 = null;
        org.springframework.core.io.Resource inputFile10 = null;

        byte[] response = api.zipArchiveZipCreate(inputFile1, inputFile2, inputFile3, inputFile4, inputFile5, inputFile6, inputFile7, inputFile8, inputFile9, inputFile10);

        // TODO: test validations
    }
    
    /**
     * Compress files and folders to create a new zip archive with advanced options
     *
     * Create a new zip archive by compressing input files, folders and leverage advanced options to control the structure of the resulting zip archive.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void zipArchiveZipCreateAdvancedTest() {
        CreateZipArchiveRequest request = null;

        Object response = api.zipArchiveZipCreateAdvanced(request);

        // TODO: test validations
    }
    
    /**
     * Compress files to create a new, encrypted and password-protected zip archive
     *
     * Create a new zip archive by compressing input files, and also applies encryption and password protection to the zip.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void zipArchiveZipCreateEncryptedTest() {
        String password = null;
        org.springframework.core.io.Resource inputFile1 = null;
        String encryptionAlgorithm = null;
        org.springframework.core.io.Resource inputFile2 = null;
        org.springframework.core.io.Resource inputFile3 = null;
        org.springframework.core.io.Resource inputFile4 = null;
        org.springframework.core.io.Resource inputFile5 = null;
        org.springframework.core.io.Resource inputFile6 = null;
        org.springframework.core.io.Resource inputFile7 = null;
        org.springframework.core.io.Resource inputFile8 = null;
        org.springframework.core.io.Resource inputFile9 = null;
        org.springframework.core.io.Resource inputFile10 = null;

        byte[] response = api.zipArchiveZipCreateEncrypted(password, inputFile1, encryptionAlgorithm, inputFile2, inputFile3, inputFile4, inputFile5, inputFile6, inputFile7, inputFile8, inputFile9, inputFile10);

        // TODO: test validations
    }
    
    /**
     * Create an encrypted zip file to quarantine a dangerous file
     *
     * Create a new zip archive by compressing input files, and also applies encryption and password protection to the zip, for the purposes of quarantining the underlyikng file.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void zipArchiveZipCreateQuarantineTest() {
        String password = null;
        org.springframework.core.io.Resource inputFile1 = null;
        String encryptionAlgorithm = null;

        Object response = api.zipArchiveZipCreateQuarantine(password, inputFile1, encryptionAlgorithm);

        // TODO: test validations
    }
    
    /**
     * Decrypt and remove password protection on a zip file
     *
     * Decrypts and removes password protection from an encrypted zip file with the specified password
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void zipArchiveZipDecryptTest() {
        String zipPassword = null;
        org.springframework.core.io.Resource inputFile = null;

        Object response = api.zipArchiveZipDecrypt(zipPassword, inputFile);

        // TODO: test validations
    }
    
    /**
     * Encrypt and password protect a zip file
     *
     * Encrypts and password protects an existing zip file with the specified password and encryption algorithm
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void zipArchiveZipEncryptAdvancedTest() {
        ZipEncryptionAdvancedRequest encryptionRequest = null;

        Object response = api.zipArchiveZipEncryptAdvanced(encryptionRequest);

        // TODO: test validations
    }
    
    /**
     * Extract, decompress files and folders from a zip archive
     *
     * Extracts a zip archive by decompressing files, and folders.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void zipArchiveZipExtractTest() {
        org.springframework.core.io.Resource inputFile = null;

        ZipExtractResponse response = api.zipArchiveZipExtract(inputFile);

        // TODO: test validations
    }
    
}
