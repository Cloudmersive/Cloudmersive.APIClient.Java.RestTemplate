/*
 * convertapi
 * Convert API lets you effortlessly convert file formats and types.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cloudmersive.client.rt.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * A single PowerPoint PPTX file corresponding to one worksheet (tab) in the original spreadsheet
 */
@JsonPropertyOrder({
  PresentationAdvancedResult.JSON_PROPERTY_SLIDE_NUMBER,
  PresentationAdvancedResult.JSON_PROPERTY_PRESENTATION_CONTENTS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-22T03:16:28.653440600Z[Etc/UTC]", comments = "Generator version: 7.9.0")
public class PresentationAdvancedResult {
  public static final String JSON_PROPERTY_SLIDE_NUMBER = "SlideNumber";
  private Integer slideNumber;

  public static final String JSON_PROPERTY_PRESENTATION_CONTENTS = "PresentationContents";
  private byte[] presentationContents;

  public PresentationAdvancedResult() {
  }

  public PresentationAdvancedResult slideNumber(Integer slideNumber) {
    
    this.slideNumber = slideNumber;
    return this;
  }

  /**
   * Presentation number of the converted page, starting with 1 for the left-most worksheet
   * @return slideNumber
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SLIDE_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getSlideNumber() {
    return slideNumber;
  }


  @JsonProperty(JSON_PROPERTY_SLIDE_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSlideNumber(Integer slideNumber) {
    this.slideNumber = slideNumber;
  }

  public PresentationAdvancedResult presentationContents(byte[] presentationContents) {
    
    this.presentationContents = presentationContents;
    return this;
  }

  /**
   * Contents of the presentation in bytes
   * @return presentationContents
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PRESENTATION_CONTENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public byte[] getPresentationContents() {
    return presentationContents;
  }


  @JsonProperty(JSON_PROPERTY_PRESENTATION_CONTENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPresentationContents(byte[] presentationContents) {
    this.presentationContents = presentationContents;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PresentationAdvancedResult presentationAdvancedResult = (PresentationAdvancedResult) o;
    return Objects.equals(this.slideNumber, presentationAdvancedResult.slideNumber) &&
        Arrays.equals(this.presentationContents, presentationAdvancedResult.presentationContents);
  }

  @Override
  public int hashCode() {
    return Objects.hash(slideNumber, Arrays.hashCode(presentationContents));
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PresentationAdvancedResult {\n");
    sb.append("    slideNumber: ").append(toIndentedString(slideNumber)).append("\n");
    sb.append("    presentationContents: ").append(toIndentedString(presentationContents)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

