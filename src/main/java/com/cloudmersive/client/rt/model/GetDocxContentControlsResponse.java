/*
 * convertapi
 * Convert API lets you effortlessly convert file formats and types.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cloudmersive.client.rt.model;

import java.util.Objects;
import java.util.Arrays;
import com.cloudmersive.client.rt.model.DocxContentControl;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Result of running a DocxGetContentControls command
 */
@JsonPropertyOrder({
  GetDocxContentControlsResponse.JSON_PROPERTY_SUCCESSFUL,
  GetDocxContentControlsResponse.JSON_PROPERTY_CONTENT_CONTROLS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-22T03:16:28.653440600Z[Etc/UTC]", comments = "Generator version: 7.9.0")
public class GetDocxContentControlsResponse {
  public static final String JSON_PROPERTY_SUCCESSFUL = "Successful";
  private Boolean successful;

  public static final String JSON_PROPERTY_CONTENT_CONTROLS = "ContentControls";
  private List<DocxContentControl> contentControls = new ArrayList<>();

  public GetDocxContentControlsResponse() {
  }

  public GetDocxContentControlsResponse successful(Boolean successful) {
    
    this.successful = successful;
    return this;
  }

  /**
   * True if successful, false otherwise
   * @return successful
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SUCCESSFUL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getSuccessful() {
    return successful;
  }


  @JsonProperty(JSON_PROPERTY_SUCCESSFUL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSuccessful(Boolean successful) {
    this.successful = successful;
  }

  public GetDocxContentControlsResponse contentControls(List<DocxContentControl> contentControls) {
    
    this.contentControls = contentControls;
    return this;
  }

  public GetDocxContentControlsResponse addContentControlsItem(DocxContentControl contentControlsItem) {
    if (this.contentControls == null) {
      this.contentControls = new ArrayList<>();
    }
    this.contentControls.add(contentControlsItem);
    return this;
  }

  /**
   * Content controls in the DOCX
   * @return contentControls
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONTENT_CONTROLS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<DocxContentControl> getContentControls() {
    return contentControls;
  }


  @JsonProperty(JSON_PROPERTY_CONTENT_CONTROLS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setContentControls(List<DocxContentControl> contentControls) {
    this.contentControls = contentControls;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetDocxContentControlsResponse getDocxContentControlsResponse = (GetDocxContentControlsResponse) o;
    return Objects.equals(this.successful, getDocxContentControlsResponse.successful) &&
        Objects.equals(this.contentControls, getDocxContentControlsResponse.contentControls);
  }

  @Override
  public int hashCode() {
    return Objects.hash(successful, contentControls);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetDocxContentControlsResponse {\n");
    sb.append("    successful: ").append(toIndentedString(successful)).append("\n");
    sb.append("    contentControls: ").append(toIndentedString(contentControls)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

