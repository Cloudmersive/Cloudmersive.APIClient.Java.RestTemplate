/*
 * barcodeapi
 * Barcode APIs let you generate barcode images, and recognize values from images of barcodes.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cloudmersive.client.rt.model;

import java.util.Objects;
import java.util.Arrays;
import com.cloudmersive.client.rt.model.BarcodeQRResultItem;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Result of the advanced QR barcode scan
 */
@JsonPropertyOrder({
  BarcodeScanQRAdvancedResult.JSON_PROPERTY_SUCCESSFUL,
  BarcodeScanQRAdvancedResult.JSON_PROPERTY_RESULT_BARCODES,
  BarcodeScanQRAdvancedResult.JSON_PROPERTY_BARCODE_COUNT,
  BarcodeScanQRAdvancedResult.JSON_PROPERTY_ERROR_MESSAGE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-22T03:16:12.746969900Z[Etc/UTC]", comments = "Generator version: 7.9.0")
public class BarcodeScanQRAdvancedResult {
  public static final String JSON_PROPERTY_SUCCESSFUL = "Successful";
  private Boolean successful;

  public static final String JSON_PROPERTY_RESULT_BARCODES = "ResultBarcodes";
  private List<BarcodeQRResultItem> resultBarcodes = new ArrayList<>();

  public static final String JSON_PROPERTY_BARCODE_COUNT = "BarcodeCount";
  private Integer barcodeCount;

  public static final String JSON_PROPERTY_ERROR_MESSAGE = "ErrorMessage";
  private String errorMessage;

  public BarcodeScanQRAdvancedResult() {
  }

  public BarcodeScanQRAdvancedResult successful(Boolean successful) {
    
    this.successful = successful;
    return this;
  }

  /**
   * True if the operation was successful, false otherwise
   * @return successful
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SUCCESSFUL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getSuccessful() {
    return successful;
  }


  @JsonProperty(JSON_PROPERTY_SUCCESSFUL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSuccessful(Boolean successful) {
    this.successful = successful;
  }

  public BarcodeScanQRAdvancedResult resultBarcodes(List<BarcodeQRResultItem> resultBarcodes) {
    
    this.resultBarcodes = resultBarcodes;
    return this;
  }

  public BarcodeScanQRAdvancedResult addResultBarcodesItem(BarcodeQRResultItem resultBarcodesItem) {
    if (this.resultBarcodes == null) {
      this.resultBarcodes = new ArrayList<>();
    }
    this.resultBarcodes.add(resultBarcodesItem);
    return this;
  }

  /**
   * Results of performing the QR barcode scan operation
   * @return resultBarcodes
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RESULT_BARCODES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<BarcodeQRResultItem> getResultBarcodes() {
    return resultBarcodes;
  }


  @JsonProperty(JSON_PROPERTY_RESULT_BARCODES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setResultBarcodes(List<BarcodeQRResultItem> resultBarcodes) {
    this.resultBarcodes = resultBarcodes;
  }

  public BarcodeScanQRAdvancedResult barcodeCount(Integer barcodeCount) {
    
    this.barcodeCount = barcodeCount;
    return this;
  }

  /**
   * Number of barcodes read
   * @return barcodeCount
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BARCODE_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getBarcodeCount() {
    return barcodeCount;
  }


  @JsonProperty(JSON_PROPERTY_BARCODE_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBarcodeCount(Integer barcodeCount) {
    this.barcodeCount = barcodeCount;
  }

  public BarcodeScanQRAdvancedResult errorMessage(String errorMessage) {
    
    this.errorMessage = errorMessage;
    return this;
  }

  /**
   * Error message if any
   * @return errorMessage
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ERROR_MESSAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getErrorMessage() {
    return errorMessage;
  }


  @JsonProperty(JSON_PROPERTY_ERROR_MESSAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setErrorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BarcodeScanQRAdvancedResult barcodeScanQRAdvancedResult = (BarcodeScanQRAdvancedResult) o;
    return Objects.equals(this.successful, barcodeScanQRAdvancedResult.successful) &&
        Objects.equals(this.resultBarcodes, barcodeScanQRAdvancedResult.resultBarcodes) &&
        Objects.equals(this.barcodeCount, barcodeScanQRAdvancedResult.barcodeCount) &&
        Objects.equals(this.errorMessage, barcodeScanQRAdvancedResult.errorMessage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(successful, resultBarcodes, barcodeCount, errorMessage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BarcodeScanQRAdvancedResult {\n");
    sb.append("    successful: ").append(toIndentedString(successful)).append("\n");
    sb.append("    resultBarcodes: ").append(toIndentedString(resultBarcodes)).append("\n");
    sb.append("    barcodeCount: ").append(toIndentedString(barcodeCount)).append("\n");
    sb.append("    errorMessage: ").append(toIndentedString(errorMessage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

