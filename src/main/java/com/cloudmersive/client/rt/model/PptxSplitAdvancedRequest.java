/*
 * convertapi
 * Convert API lets you effortlessly convert file formats and types.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cloudmersive.client.rt.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Request to split a PowerPoint presentation
 */
@JsonPropertyOrder({
  PptxSplitAdvancedRequest.JSON_PROPERTY_INPUT_FILE,
  PptxSplitAdvancedRequest.JSON_PROPERTY_SLIDES_PER_PRESENTATION
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-25T20:51:24.468928200Z[Etc/UTC]", comments = "Generator version: 7.9.0")
public class PptxSplitAdvancedRequest {
  public static final String JSON_PROPERTY_INPUT_FILE = "InputFile";
  private byte[] inputFile;

  public static final String JSON_PROPERTY_SLIDES_PER_PRESENTATION = "SlidesPerPresentation";
  private Integer slidesPerPresentation;

  public PptxSplitAdvancedRequest() {
  }

  public PptxSplitAdvancedRequest inputFile(byte[] inputFile) {
    
    this.inputFile = inputFile;
    return this;
  }

  /**
   * Input file
   * @return inputFile
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INPUT_FILE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public byte[] getInputFile() {
    return inputFile;
  }


  @JsonProperty(JSON_PROPERTY_INPUT_FILE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInputFile(byte[] inputFile) {
    this.inputFile = inputFile;
  }

  public PptxSplitAdvancedRequest slidesPerPresentation(Integer slidesPerPresentation) {
    
    this.slidesPerPresentation = slidesPerPresentation;
    return this;
  }

  /**
   * Slides per presentation for result
   * @return slidesPerPresentation
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SLIDES_PER_PRESENTATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getSlidesPerPresentation() {
    return slidesPerPresentation;
  }


  @JsonProperty(JSON_PROPERTY_SLIDES_PER_PRESENTATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSlidesPerPresentation(Integer slidesPerPresentation) {
    this.slidesPerPresentation = slidesPerPresentation;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PptxSplitAdvancedRequest pptxSplitAdvancedRequest = (PptxSplitAdvancedRequest) o;
    return Arrays.equals(this.inputFile, pptxSplitAdvancedRequest.inputFile) &&
        Objects.equals(this.slidesPerPresentation, pptxSplitAdvancedRequest.slidesPerPresentation);
  }

  @Override
  public int hashCode() {
    return Objects.hash(Arrays.hashCode(inputFile), slidesPerPresentation);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PptxSplitAdvancedRequest {\n");
    sb.append("    inputFile: ").append(toIndentedString(inputFile)).append("\n");
    sb.append("    slidesPerPresentation: ").append(toIndentedString(slidesPerPresentation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

