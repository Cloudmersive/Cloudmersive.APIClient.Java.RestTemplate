/*
 * imageapi
 * Image Recognition and Processing APIs let you use Machine Learning to recognize and process images, and also perform useful image modification operations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cloudmersive.client.rt.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Request to compute the similarity between two image hashes
 */
@JsonPropertyOrder({
  ImageSimilarityHashDistanceRequest.JSON_PROPERTY_IMAGE_HASH1,
  ImageSimilarityHashDistanceRequest.JSON_PROPERTY_IMAGE_HASH2
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-25T20:51:15.299595200Z[Etc/UTC]", comments = "Generator version: 7.9.0")
public class ImageSimilarityHashDistanceRequest {
  public static final String JSON_PROPERTY_IMAGE_HASH1 = "ImageHash1";
  private String imageHash1;

  public static final String JSON_PROPERTY_IMAGE_HASH2 = "ImageHash2";
  private String imageHash2;

  public ImageSimilarityHashDistanceRequest() {
  }

  public ImageSimilarityHashDistanceRequest imageHash1(String imageHash1) {
    
    this.imageHash1 = imageHash1;
    return this;
  }

  /**
   * Image hash computed using Cloudmersive Image Hashing API
   * @return imageHash1
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IMAGE_HASH1)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getImageHash1() {
    return imageHash1;
  }


  @JsonProperty(JSON_PROPERTY_IMAGE_HASH1)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setImageHash1(String imageHash1) {
    this.imageHash1 = imageHash1;
  }

  public ImageSimilarityHashDistanceRequest imageHash2(String imageHash2) {
    
    this.imageHash2 = imageHash2;
    return this;
  }

  /**
   * Image hash computed using Cloudmersive Image Hashing API
   * @return imageHash2
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IMAGE_HASH2)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getImageHash2() {
    return imageHash2;
  }


  @JsonProperty(JSON_PROPERTY_IMAGE_HASH2)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setImageHash2(String imageHash2) {
    this.imageHash2 = imageHash2;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImageSimilarityHashDistanceRequest imageSimilarityHashDistanceRequest = (ImageSimilarityHashDistanceRequest) o;
    return Objects.equals(this.imageHash1, imageSimilarityHashDistanceRequest.imageHash1) &&
        Objects.equals(this.imageHash2, imageSimilarityHashDistanceRequest.imageHash2);
  }

  @Override
  public int hashCode() {
    return Objects.hash(imageHash1, imageHash2);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImageSimilarityHashDistanceRequest {\n");
    sb.append("    imageHash1: ").append(toIndentedString(imageHash1)).append("\n");
    sb.append("    imageHash2: ").append(toIndentedString(imageHash2)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

