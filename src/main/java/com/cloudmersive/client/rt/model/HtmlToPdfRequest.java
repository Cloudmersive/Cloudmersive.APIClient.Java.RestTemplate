/*
 * convertapi
 * Convert API lets you effortlessly convert file formats and types.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cloudmersive.client.rt.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

/**
 * Details of the HTML to PDF request
 */
@ApiModel(description = "Details of the HTML to PDF request")
@JsonPropertyOrder({
  HtmlToPdfRequest.JSON_PROPERTY_HTML,
  HtmlToPdfRequest.JSON_PROPERTY_EXTRA_LOADING_WAIT,
  HtmlToPdfRequest.JSON_PROPERTY_INCLUDE_BACKGROUND_GRAPHICS,
  HtmlToPdfRequest.JSON_PROPERTY_SCALE_FACTOR
})
@JsonTypeName("HtmlToPdfRequest")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-06-01T10:54:02.994-07:00[America/Los_Angeles]")
public class HtmlToPdfRequest {
  public static final String JSON_PROPERTY_HTML = "Html";
  private String html;

  public static final String JSON_PROPERTY_EXTRA_LOADING_WAIT = "ExtraLoadingWait";
  private Integer extraLoadingWait;

  public static final String JSON_PROPERTY_INCLUDE_BACKGROUND_GRAPHICS = "IncludeBackgroundGraphics";
  private Boolean includeBackgroundGraphics;

  public static final String JSON_PROPERTY_SCALE_FACTOR = "ScaleFactor";
  private Integer scaleFactor;


  public HtmlToPdfRequest html(String html) {
    
    this.html = html;
    return this;
  }

   /**
   * HTML to render to PDF
   * @return html
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "HTML to render to PDF")
  @JsonProperty(JSON_PROPERTY_HTML)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getHtml() {
    return html;
  }


  public void setHtml(String html) {
    this.html = html;
  }


  public HtmlToPdfRequest extraLoadingWait(Integer extraLoadingWait) {
    
    this.extraLoadingWait = extraLoadingWait;
    return this;
  }

   /**
   * Optional: Additional number of milliseconds to wait once the web page has finished loading before taking the screenshot.  Can be helpful for highly asynchronous websites. Provide a value of 0 for the default of 5000 milliseconds (5 seconds). Maximum is 30000 milliseconds (30 seconds).
   * @return extraLoadingWait
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Optional: Additional number of milliseconds to wait once the web page has finished loading before taking the screenshot.  Can be helpful for highly asynchronous websites. Provide a value of 0 for the default of 5000 milliseconds (5 seconds). Maximum is 30000 milliseconds (30 seconds).")
  @JsonProperty(JSON_PROPERTY_EXTRA_LOADING_WAIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getExtraLoadingWait() {
    return extraLoadingWait;
  }


  public void setExtraLoadingWait(Integer extraLoadingWait) {
    this.extraLoadingWait = extraLoadingWait;
  }


  public HtmlToPdfRequest includeBackgroundGraphics(Boolean includeBackgroundGraphics) {
    
    this.includeBackgroundGraphics = includeBackgroundGraphics;
    return this;
  }

   /**
   * Optional: Set to true to include background graphics in the PDF, or false to not include.  Default is true.
   * @return includeBackgroundGraphics
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Optional: Set to true to include background graphics in the PDF, or false to not include.  Default is true.")
  @JsonProperty(JSON_PROPERTY_INCLUDE_BACKGROUND_GRAPHICS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getIncludeBackgroundGraphics() {
    return includeBackgroundGraphics;
  }


  public void setIncludeBackgroundGraphics(Boolean includeBackgroundGraphics) {
    this.includeBackgroundGraphics = includeBackgroundGraphics;
  }


  public HtmlToPdfRequest scaleFactor(Integer scaleFactor) {
    
    this.scaleFactor = scaleFactor;
    return this;
  }

   /**
   * Optional: Set to 100 to scale at 100%, set to 50% to scale down to 50% scale, set to 200% to scale up to 200% scale, etc.  Default is 100%. Maximum is 1000%.
   * @return scaleFactor
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Optional: Set to 100 to scale at 100%, set to 50% to scale down to 50% scale, set to 200% to scale up to 200% scale, etc.  Default is 100%. Maximum is 1000%.")
  @JsonProperty(JSON_PROPERTY_SCALE_FACTOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getScaleFactor() {
    return scaleFactor;
  }


  public void setScaleFactor(Integer scaleFactor) {
    this.scaleFactor = scaleFactor;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HtmlToPdfRequest htmlToPdfRequest = (HtmlToPdfRequest) o;
    return Objects.equals(this.html, htmlToPdfRequest.html) &&
        Objects.equals(this.extraLoadingWait, htmlToPdfRequest.extraLoadingWait) &&
        Objects.equals(this.includeBackgroundGraphics, htmlToPdfRequest.includeBackgroundGraphics) &&
        Objects.equals(this.scaleFactor, htmlToPdfRequest.scaleFactor);
  }

  @Override
  public int hashCode() {
    return Objects.hash(html, extraLoadingWait, includeBackgroundGraphics, scaleFactor);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HtmlToPdfRequest {\n");
    sb.append("    html: ").append(toIndentedString(html)).append("\n");
    sb.append("    extraLoadingWait: ").append(toIndentedString(extraLoadingWait)).append("\n");
    sb.append("    includeBackgroundGraphics: ").append(toIndentedString(includeBackgroundGraphics)).append("\n");
    sb.append("    scaleFactor: ").append(toIndentedString(scaleFactor)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

