/*
 * ocrapi
 * The powerful Optical Character Recognition (OCR) APIs let you convert scanned images of pages into recognized text.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cloudmersive.client.rt.model;

import java.util.Objects;
import java.util.Arrays;
import com.cloudmersive.client.rt.model.OcrPageResult;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Response from an OCR to text operation.  Includes the confidence rating and converted text result.
 */
@JsonPropertyOrder({
  PdfToTextResponse.JSON_PROPERTY_SUCCESSFUL,
  PdfToTextResponse.JSON_PROPERTY_OCR_PAGES,
  PdfToTextResponse.JSON_PROPERTY_ASYNC_JOB_I_D,
  PdfToTextResponse.JSON_PROPERTY_ASYNC_JOB_STATUS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-22T03:16:05.887469400Z[Etc/UTC]", comments = "Generator version: 7.9.0")
public class PdfToTextResponse {
  public static final String JSON_PROPERTY_SUCCESSFUL = "Successful";
  private Boolean successful;

  public static final String JSON_PROPERTY_OCR_PAGES = "OcrPages";
  private List<OcrPageResult> ocrPages = new ArrayList<>();

  public static final String JSON_PROPERTY_ASYNC_JOB_I_D = "AsyncJobID";
  private String asyncJobID;

  public static final String JSON_PROPERTY_ASYNC_JOB_STATUS = "AsyncJobStatus";
  private String asyncJobStatus;

  public PdfToTextResponse() {
  }

  public PdfToTextResponse successful(Boolean successful) {
    
    this.successful = successful;
    return this;
  }

  /**
   * True if successful, false otherwise
   * @return successful
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SUCCESSFUL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getSuccessful() {
    return successful;
  }


  @JsonProperty(JSON_PROPERTY_SUCCESSFUL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSuccessful(Boolean successful) {
    this.successful = successful;
  }

  public PdfToTextResponse ocrPages(List<OcrPageResult> ocrPages) {
    
    this.ocrPages = ocrPages;
    return this;
  }

  public PdfToTextResponse addOcrPagesItem(OcrPageResult ocrPagesItem) {
    if (this.ocrPages == null) {
      this.ocrPages = new ArrayList<>();
    }
    this.ocrPages.add(ocrPagesItem);
    return this;
  }

  /**
   * Page OCR results
   * @return ocrPages
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_OCR_PAGES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<OcrPageResult> getOcrPages() {
    return ocrPages;
  }


  @JsonProperty(JSON_PROPERTY_OCR_PAGES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOcrPages(List<OcrPageResult> ocrPages) {
    this.ocrPages = ocrPages;
  }

  public PdfToTextResponse asyncJobID(String asyncJobID) {
    
    this.asyncJobID = asyncJobID;
    return this;
  }

  /**
   * When the job exceeds 25 pages, an Async Job ID is returned.  Use the CheckPdfOcrJobStatus API to check on the status of this job using the AsyncJobID and get the result when it finishes
   * @return asyncJobID
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ASYNC_JOB_I_D)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAsyncJobID() {
    return asyncJobID;
  }


  @JsonProperty(JSON_PROPERTY_ASYNC_JOB_I_D)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAsyncJobID(String asyncJobID) {
    this.asyncJobID = asyncJobID;
  }

  public PdfToTextResponse asyncJobStatus(String asyncJobStatus) {
    
    this.asyncJobStatus = asyncJobStatus;
    return this;
  }

  /**
   * Returns the job status of the Async Job, if applicable.  Possible states are STARTED and COMPLETED
   * @return asyncJobStatus
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ASYNC_JOB_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAsyncJobStatus() {
    return asyncJobStatus;
  }


  @JsonProperty(JSON_PROPERTY_ASYNC_JOB_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAsyncJobStatus(String asyncJobStatus) {
    this.asyncJobStatus = asyncJobStatus;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PdfToTextResponse pdfToTextResponse = (PdfToTextResponse) o;
    return Objects.equals(this.successful, pdfToTextResponse.successful) &&
        Objects.equals(this.ocrPages, pdfToTextResponse.ocrPages) &&
        Objects.equals(this.asyncJobID, pdfToTextResponse.asyncJobID) &&
        Objects.equals(this.asyncJobStatus, pdfToTextResponse.asyncJobStatus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(successful, ocrPages, asyncJobID, asyncJobStatus);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PdfToTextResponse {\n");
    sb.append("    successful: ").append(toIndentedString(successful)).append("\n");
    sb.append("    ocrPages: ").append(toIndentedString(ocrPages)).append("\n");
    sb.append("    asyncJobID: ").append(toIndentedString(asyncJobID)).append("\n");
    sb.append("    asyncJobStatus: ").append(toIndentedString(asyncJobStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

