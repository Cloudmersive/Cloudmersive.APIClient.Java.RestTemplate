/*
 * virusapi
 * The Cloudmersive Virus Scan API lets you scan files and content for viruses and identify security issues with content.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cloudmersive.client.rt.model;

import java.util.Objects;
import java.util.Arrays;
import com.cloudmersive.client.rt.model.AdditionalAdvancedScanInformation;
import com.cloudmersive.client.rt.model.CloudStorageVirusFound;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Result of running an advanced virus scan on cloud storage
 */
@JsonPropertyOrder({
  CloudStorageAdvancedVirusScanResult.JSON_PROPERTY_SUCCESSFUL,
  CloudStorageAdvancedVirusScanResult.JSON_PROPERTY_CLEAN_RESULT,
  CloudStorageAdvancedVirusScanResult.JSON_PROPERTY_CONTAINS_EXECUTABLE,
  CloudStorageAdvancedVirusScanResult.JSON_PROPERTY_CONTAINS_INVALID_FILE,
  CloudStorageAdvancedVirusScanResult.JSON_PROPERTY_CONTAINS_SCRIPT,
  CloudStorageAdvancedVirusScanResult.JSON_PROPERTY_CONTAINS_PASSWORD_PROTECTED_FILE,
  CloudStorageAdvancedVirusScanResult.JSON_PROPERTY_CONTAINS_RESTRICTED_FILE_FORMAT,
  CloudStorageAdvancedVirusScanResult.JSON_PROPERTY_CONTAINS_MACROS,
  CloudStorageAdvancedVirusScanResult.JSON_PROPERTY_VERIFIED_FILE_FORMAT,
  CloudStorageAdvancedVirusScanResult.JSON_PROPERTY_FOUND_VIRUSES,
  CloudStorageAdvancedVirusScanResult.JSON_PROPERTY_ERROR_DETAILED_DESCRIPTION,
  CloudStorageAdvancedVirusScanResult.JSON_PROPERTY_FILE_SIZE,
  CloudStorageAdvancedVirusScanResult.JSON_PROPERTY_CONTENT_INFORMATION
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-25T20:51:41.906463200Z[Etc/UTC]", comments = "Generator version: 7.9.0")
public class CloudStorageAdvancedVirusScanResult {
  public static final String JSON_PROPERTY_SUCCESSFUL = "Successful";
  private Boolean successful;

  public static final String JSON_PROPERTY_CLEAN_RESULT = "CleanResult";
  private Boolean cleanResult;

  public static final String JSON_PROPERTY_CONTAINS_EXECUTABLE = "ContainsExecutable";
  private Boolean containsExecutable;

  public static final String JSON_PROPERTY_CONTAINS_INVALID_FILE = "ContainsInvalidFile";
  private Boolean containsInvalidFile;

  public static final String JSON_PROPERTY_CONTAINS_SCRIPT = "ContainsScript";
  private Boolean containsScript;

  public static final String JSON_PROPERTY_CONTAINS_PASSWORD_PROTECTED_FILE = "ContainsPasswordProtectedFile";
  private Boolean containsPasswordProtectedFile;

  public static final String JSON_PROPERTY_CONTAINS_RESTRICTED_FILE_FORMAT = "ContainsRestrictedFileFormat";
  private Boolean containsRestrictedFileFormat;

  public static final String JSON_PROPERTY_CONTAINS_MACROS = "ContainsMacros";
  private Boolean containsMacros;

  public static final String JSON_PROPERTY_VERIFIED_FILE_FORMAT = "VerifiedFileFormat";
  private String verifiedFileFormat;

  public static final String JSON_PROPERTY_FOUND_VIRUSES = "FoundViruses";
  private List<CloudStorageVirusFound> foundViruses = new ArrayList<>();

  public static final String JSON_PROPERTY_ERROR_DETAILED_DESCRIPTION = "ErrorDetailedDescription";
  private String errorDetailedDescription;

  public static final String JSON_PROPERTY_FILE_SIZE = "FileSize";
  private Long fileSize;

  public static final String JSON_PROPERTY_CONTENT_INFORMATION = "ContentInformation";
  private AdditionalAdvancedScanInformation contentInformation;

  public CloudStorageAdvancedVirusScanResult() {
  }

  public CloudStorageAdvancedVirusScanResult successful(Boolean successful) {
    
    this.successful = successful;
    return this;
  }

  /**
   * True if the operation of retrieving the file, and scanning it were successfully completed, false if the file could not be downloaded from cloud storage, or if the file could not be scanned.  Note that successful completion does not mean the file is clean; for the output of the virus scanning operation itself, use the CleanResult and FoundViruses parameters.
   * @return successful
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SUCCESSFUL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getSuccessful() {
    return successful;
  }


  @JsonProperty(JSON_PROPERTY_SUCCESSFUL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSuccessful(Boolean successful) {
    this.successful = successful;
  }

  public CloudStorageAdvancedVirusScanResult cleanResult(Boolean cleanResult) {
    
    this.cleanResult = cleanResult;
    return this;
  }

  /**
   * True if the scan contained no viruses, false otherwise
   * @return cleanResult
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CLEAN_RESULT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getCleanResult() {
    return cleanResult;
  }


  @JsonProperty(JSON_PROPERTY_CLEAN_RESULT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCleanResult(Boolean cleanResult) {
    this.cleanResult = cleanResult;
  }

  public CloudStorageAdvancedVirusScanResult containsExecutable(Boolean containsExecutable) {
    
    this.containsExecutable = containsExecutable;
    return this;
  }

  /**
   * True if the scan contained an executable (application code), which can be a significant risk factor
   * @return containsExecutable
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONTAINS_EXECUTABLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getContainsExecutable() {
    return containsExecutable;
  }


  @JsonProperty(JSON_PROPERTY_CONTAINS_EXECUTABLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setContainsExecutable(Boolean containsExecutable) {
    this.containsExecutable = containsExecutable;
  }

  public CloudStorageAdvancedVirusScanResult containsInvalidFile(Boolean containsInvalidFile) {
    
    this.containsInvalidFile = containsInvalidFile;
    return this;
  }

  /**
   * True if the scan contained an invalid file (such as a PDF that is not a valid PDF, Word Document that is not a valid Word Document, etc.), which can be a significant risk factor
   * @return containsInvalidFile
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONTAINS_INVALID_FILE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getContainsInvalidFile() {
    return containsInvalidFile;
  }


  @JsonProperty(JSON_PROPERTY_CONTAINS_INVALID_FILE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setContainsInvalidFile(Boolean containsInvalidFile) {
    this.containsInvalidFile = containsInvalidFile;
  }

  public CloudStorageAdvancedVirusScanResult containsScript(Boolean containsScript) {
    
    this.containsScript = containsScript;
    return this;
  }

  /**
   * True if the scan contained a script (such as a PHP script, Python script, etc.) which can be a significant risk factor
   * @return containsScript
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONTAINS_SCRIPT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getContainsScript() {
    return containsScript;
  }


  @JsonProperty(JSON_PROPERTY_CONTAINS_SCRIPT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setContainsScript(Boolean containsScript) {
    this.containsScript = containsScript;
  }

  public CloudStorageAdvancedVirusScanResult containsPasswordProtectedFile(Boolean containsPasswordProtectedFile) {
    
    this.containsPasswordProtectedFile = containsPasswordProtectedFile;
    return this;
  }

  /**
   * True if the scan contained a password protected or encrypted file, which can be a significant risk factor
   * @return containsPasswordProtectedFile
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONTAINS_PASSWORD_PROTECTED_FILE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getContainsPasswordProtectedFile() {
    return containsPasswordProtectedFile;
  }


  @JsonProperty(JSON_PROPERTY_CONTAINS_PASSWORD_PROTECTED_FILE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setContainsPasswordProtectedFile(Boolean containsPasswordProtectedFile) {
    this.containsPasswordProtectedFile = containsPasswordProtectedFile;
  }

  public CloudStorageAdvancedVirusScanResult containsRestrictedFileFormat(Boolean containsRestrictedFileFormat) {
    
    this.containsRestrictedFileFormat = containsRestrictedFileFormat;
    return this;
  }

  /**
   * True if the uploaded file is of a type that is not allowed based on the optional restrictFileTypes parameter, false otherwise; if restrictFileTypes is not set, this will always be false
   * @return containsRestrictedFileFormat
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONTAINS_RESTRICTED_FILE_FORMAT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getContainsRestrictedFileFormat() {
    return containsRestrictedFileFormat;
  }


  @JsonProperty(JSON_PROPERTY_CONTAINS_RESTRICTED_FILE_FORMAT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setContainsRestrictedFileFormat(Boolean containsRestrictedFileFormat) {
    this.containsRestrictedFileFormat = containsRestrictedFileFormat;
  }

  public CloudStorageAdvancedVirusScanResult containsMacros(Boolean containsMacros) {
    
    this.containsMacros = containsMacros;
    return this;
  }

  /**
   * True if the uploaded file contains embedded Macros of other embedded threats within the document, which can be a significant risk factor
   * @return containsMacros
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONTAINS_MACROS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getContainsMacros() {
    return containsMacros;
  }


  @JsonProperty(JSON_PROPERTY_CONTAINS_MACROS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setContainsMacros(Boolean containsMacros) {
    this.containsMacros = containsMacros;
  }

  public CloudStorageAdvancedVirusScanResult verifiedFileFormat(String verifiedFileFormat) {
    
    this.verifiedFileFormat = verifiedFileFormat;
    return this;
  }

  /**
   * For file format verification-supported file formats, the contents-verified file format of the file.  Null indicates that the file format is not supported for contents verification.  If a Virus or Malware is found, this field will always be set to Null.
   * @return verifiedFileFormat
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_VERIFIED_FILE_FORMAT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getVerifiedFileFormat() {
    return verifiedFileFormat;
  }


  @JsonProperty(JSON_PROPERTY_VERIFIED_FILE_FORMAT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVerifiedFileFormat(String verifiedFileFormat) {
    this.verifiedFileFormat = verifiedFileFormat;
  }

  public CloudStorageAdvancedVirusScanResult foundViruses(List<CloudStorageVirusFound> foundViruses) {
    
    this.foundViruses = foundViruses;
    return this;
  }

  public CloudStorageAdvancedVirusScanResult addFoundVirusesItem(CloudStorageVirusFound foundVirusesItem) {
    if (this.foundViruses == null) {
      this.foundViruses = new ArrayList<>();
    }
    this.foundViruses.add(foundVirusesItem);
    return this;
  }

  /**
   * Array of viruses found, if any
   * @return foundViruses
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FOUND_VIRUSES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<CloudStorageVirusFound> getFoundViruses() {
    return foundViruses;
  }


  @JsonProperty(JSON_PROPERTY_FOUND_VIRUSES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFoundViruses(List<CloudStorageVirusFound> foundViruses) {
    this.foundViruses = foundViruses;
  }

  public CloudStorageAdvancedVirusScanResult errorDetailedDescription(String errorDetailedDescription) {
    
    this.errorDetailedDescription = errorDetailedDescription;
    return this;
  }

  /**
   * Detailed error message if the operation was not successful
   * @return errorDetailedDescription
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ERROR_DETAILED_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getErrorDetailedDescription() {
    return errorDetailedDescription;
  }


  @JsonProperty(JSON_PROPERTY_ERROR_DETAILED_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setErrorDetailedDescription(String errorDetailedDescription) {
    this.errorDetailedDescription = errorDetailedDescription;
  }

  public CloudStorageAdvancedVirusScanResult fileSize(Long fileSize) {
    
    this.fileSize = fileSize;
    return this;
  }

  /**
   * Size in bytes of the file that was retrieved and scanned
   * @return fileSize
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FILE_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getFileSize() {
    return fileSize;
  }


  @JsonProperty(JSON_PROPERTY_FILE_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFileSize(Long fileSize) {
    this.fileSize = fileSize;
  }

  public CloudStorageAdvancedVirusScanResult contentInformation(AdditionalAdvancedScanInformation contentInformation) {
    
    this.contentInformation = contentInformation;
    return this;
  }

  /**
   * Get contentInformation
   * @return contentInformation
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONTENT_INFORMATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public AdditionalAdvancedScanInformation getContentInformation() {
    return contentInformation;
  }


  @JsonProperty(JSON_PROPERTY_CONTENT_INFORMATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setContentInformation(AdditionalAdvancedScanInformation contentInformation) {
    this.contentInformation = contentInformation;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CloudStorageAdvancedVirusScanResult cloudStorageAdvancedVirusScanResult = (CloudStorageAdvancedVirusScanResult) o;
    return Objects.equals(this.successful, cloudStorageAdvancedVirusScanResult.successful) &&
        Objects.equals(this.cleanResult, cloudStorageAdvancedVirusScanResult.cleanResult) &&
        Objects.equals(this.containsExecutable, cloudStorageAdvancedVirusScanResult.containsExecutable) &&
        Objects.equals(this.containsInvalidFile, cloudStorageAdvancedVirusScanResult.containsInvalidFile) &&
        Objects.equals(this.containsScript, cloudStorageAdvancedVirusScanResult.containsScript) &&
        Objects.equals(this.containsPasswordProtectedFile, cloudStorageAdvancedVirusScanResult.containsPasswordProtectedFile) &&
        Objects.equals(this.containsRestrictedFileFormat, cloudStorageAdvancedVirusScanResult.containsRestrictedFileFormat) &&
        Objects.equals(this.containsMacros, cloudStorageAdvancedVirusScanResult.containsMacros) &&
        Objects.equals(this.verifiedFileFormat, cloudStorageAdvancedVirusScanResult.verifiedFileFormat) &&
        Objects.equals(this.foundViruses, cloudStorageAdvancedVirusScanResult.foundViruses) &&
        Objects.equals(this.errorDetailedDescription, cloudStorageAdvancedVirusScanResult.errorDetailedDescription) &&
        Objects.equals(this.fileSize, cloudStorageAdvancedVirusScanResult.fileSize) &&
        Objects.equals(this.contentInformation, cloudStorageAdvancedVirusScanResult.contentInformation);
  }

  @Override
  public int hashCode() {
    return Objects.hash(successful, cleanResult, containsExecutable, containsInvalidFile, containsScript, containsPasswordProtectedFile, containsRestrictedFileFormat, containsMacros, verifiedFileFormat, foundViruses, errorDetailedDescription, fileSize, contentInformation);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CloudStorageAdvancedVirusScanResult {\n");
    sb.append("    successful: ").append(toIndentedString(successful)).append("\n");
    sb.append("    cleanResult: ").append(toIndentedString(cleanResult)).append("\n");
    sb.append("    containsExecutable: ").append(toIndentedString(containsExecutable)).append("\n");
    sb.append("    containsInvalidFile: ").append(toIndentedString(containsInvalidFile)).append("\n");
    sb.append("    containsScript: ").append(toIndentedString(containsScript)).append("\n");
    sb.append("    containsPasswordProtectedFile: ").append(toIndentedString(containsPasswordProtectedFile)).append("\n");
    sb.append("    containsRestrictedFileFormat: ").append(toIndentedString(containsRestrictedFileFormat)).append("\n");
    sb.append("    containsMacros: ").append(toIndentedString(containsMacros)).append("\n");
    sb.append("    verifiedFileFormat: ").append(toIndentedString(verifiedFileFormat)).append("\n");
    sb.append("    foundViruses: ").append(toIndentedString(foundViruses)).append("\n");
    sb.append("    errorDetailedDescription: ").append(toIndentedString(errorDetailedDescription)).append("\n");
    sb.append("    fileSize: ").append(toIndentedString(fileSize)).append("\n");
    sb.append("    contentInformation: ").append(toIndentedString(contentInformation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

