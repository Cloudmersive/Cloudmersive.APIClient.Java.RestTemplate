/*
 * convertapi
 * Convert API lets you effortlessly convert file formats and types.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cloudmersive.client.rt.model;

import java.util.Objects;
import java.util.Arrays;
import com.cloudmersive.client.rt.model.SplitDocumentResult;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * The result of splitting a Word document into individual Word DOCX pages
 */
@JsonPropertyOrder({
  SplitDocxDocumentResult.JSON_PROPERTY_RESULT_DOCUMENTS,
  SplitDocxDocumentResult.JSON_PROPERTY_SUCCESSFUL
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-25T20:51:24.468928200Z[Etc/UTC]", comments = "Generator version: 7.9.0")
public class SplitDocxDocumentResult {
  public static final String JSON_PROPERTY_RESULT_DOCUMENTS = "ResultDocuments";
  private List<SplitDocumentResult> resultDocuments = new ArrayList<>();

  public static final String JSON_PROPERTY_SUCCESSFUL = "Successful";
  private Boolean successful;

  public SplitDocxDocumentResult() {
  }

  public SplitDocxDocumentResult resultDocuments(List<SplitDocumentResult> resultDocuments) {
    
    this.resultDocuments = resultDocuments;
    return this;
  }

  public SplitDocxDocumentResult addResultDocumentsItem(SplitDocumentResult resultDocumentsItem) {
    if (this.resultDocuments == null) {
      this.resultDocuments = new ArrayList<>();
    }
    this.resultDocuments.add(resultDocumentsItem);
    return this;
  }

  /**
   * Get resultDocuments
   * @return resultDocuments
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RESULT_DOCUMENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<SplitDocumentResult> getResultDocuments() {
    return resultDocuments;
  }


  @JsonProperty(JSON_PROPERTY_RESULT_DOCUMENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setResultDocuments(List<SplitDocumentResult> resultDocuments) {
    this.resultDocuments = resultDocuments;
  }

  public SplitDocxDocumentResult successful(Boolean successful) {
    
    this.successful = successful;
    return this;
  }

  /**
   * True if the operation was successful, false otherwise
   * @return successful
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SUCCESSFUL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getSuccessful() {
    return successful;
  }


  @JsonProperty(JSON_PROPERTY_SUCCESSFUL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSuccessful(Boolean successful) {
    this.successful = successful;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SplitDocxDocumentResult splitDocxDocumentResult = (SplitDocxDocumentResult) o;
    return Objects.equals(this.resultDocuments, splitDocxDocumentResult.resultDocuments) &&
        Objects.equals(this.successful, splitDocxDocumentResult.successful);
  }

  @Override
  public int hashCode() {
    return Objects.hash(resultDocuments, successful);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SplitDocxDocumentResult {\n");
    sb.append("    resultDocuments: ").append(toIndentedString(resultDocuments)).append("\n");
    sb.append("    successful: ").append(toIndentedString(successful)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

