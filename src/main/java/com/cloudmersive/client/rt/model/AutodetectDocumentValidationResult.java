/*
 * convertapi
 * Convert API lets you effortlessly convert file formats and types.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cloudmersive.client.rt.model;

import java.util.Objects;
import java.util.Arrays;
import com.cloudmersive.client.rt.model.DocumentValidationError;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

/**
 * Document validation result
 */
@ApiModel(description = "Document validation result")
@JsonPropertyOrder({
  AutodetectDocumentValidationResult.JSON_PROPERTY_FILE_FORMAT_EXTENSION,
  AutodetectDocumentValidationResult.JSON_PROPERTY_DOCUMENT_IS_VALID,
  AutodetectDocumentValidationResult.JSON_PROPERTY_ERROR_COUNT,
  AutodetectDocumentValidationResult.JSON_PROPERTY_WARNING_COUNT,
  AutodetectDocumentValidationResult.JSON_PROPERTY_ERRORS_AND_WARNINGS
})
@JsonTypeName("AutodetectDocumentValidationResult")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-06-01T10:54:02.994-07:00[America/Los_Angeles]")
public class AutodetectDocumentValidationResult {
  public static final String JSON_PROPERTY_FILE_FORMAT_EXTENSION = "FileFormatExtension";
  private String fileFormatExtension;

  public static final String JSON_PROPERTY_DOCUMENT_IS_VALID = "DocumentIsValid";
  private Boolean documentIsValid;

  public static final String JSON_PROPERTY_ERROR_COUNT = "ErrorCount";
  private Integer errorCount;

  public static final String JSON_PROPERTY_WARNING_COUNT = "WarningCount";
  private Integer warningCount;

  public static final String JSON_PROPERTY_ERRORS_AND_WARNINGS = "ErrorsAndWarnings";
  private List<DocumentValidationError> errorsAndWarnings = null;


  public AutodetectDocumentValidationResult fileFormatExtension(String fileFormatExtension) {
    
    this.fileFormatExtension = fileFormatExtension;
    return this;
  }

   /**
   * Get fileFormatExtension
   * @return fileFormatExtension
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_FILE_FORMAT_EXTENSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFileFormatExtension() {
    return fileFormatExtension;
  }


  public void setFileFormatExtension(String fileFormatExtension) {
    this.fileFormatExtension = fileFormatExtension;
  }


  public AutodetectDocumentValidationResult documentIsValid(Boolean documentIsValid) {
    
    this.documentIsValid = documentIsValid;
    return this;
  }

   /**
   * True if the document is valid and has no errors, false otherwise
   * @return documentIsValid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if the document is valid and has no errors, false otherwise")
  @JsonProperty(JSON_PROPERTY_DOCUMENT_IS_VALID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getDocumentIsValid() {
    return documentIsValid;
  }


  public void setDocumentIsValid(Boolean documentIsValid) {
    this.documentIsValid = documentIsValid;
  }


  public AutodetectDocumentValidationResult errorCount(Integer errorCount) {
    
    this.errorCount = errorCount;
    return this;
  }

   /**
   * Number of validation errors found in the document
   * @return errorCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Number of validation errors found in the document")
  @JsonProperty(JSON_PROPERTY_ERROR_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getErrorCount() {
    return errorCount;
  }


  public void setErrorCount(Integer errorCount) {
    this.errorCount = errorCount;
  }


  public AutodetectDocumentValidationResult warningCount(Integer warningCount) {
    
    this.warningCount = warningCount;
    return this;
  }

   /**
   * Number of validation warnings found in the document
   * @return warningCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Number of validation warnings found in the document")
  @JsonProperty(JSON_PROPERTY_WARNING_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getWarningCount() {
    return warningCount;
  }


  public void setWarningCount(Integer warningCount) {
    this.warningCount = warningCount;
  }


  public AutodetectDocumentValidationResult errorsAndWarnings(List<DocumentValidationError> errorsAndWarnings) {
    
    this.errorsAndWarnings = errorsAndWarnings;
    return this;
  }

  public AutodetectDocumentValidationResult addErrorsAndWarningsItem(DocumentValidationError errorsAndWarningsItem) {
    if (this.errorsAndWarnings == null) {
      this.errorsAndWarnings = new ArrayList<DocumentValidationError>();
    }
    this.errorsAndWarnings.add(errorsAndWarningsItem);
    return this;
  }

   /**
   * Details of errors and warnings found
   * @return errorsAndWarnings
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Details of errors and warnings found")
  @JsonProperty(JSON_PROPERTY_ERRORS_AND_WARNINGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<DocumentValidationError> getErrorsAndWarnings() {
    return errorsAndWarnings;
  }


  public void setErrorsAndWarnings(List<DocumentValidationError> errorsAndWarnings) {
    this.errorsAndWarnings = errorsAndWarnings;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AutodetectDocumentValidationResult autodetectDocumentValidationResult = (AutodetectDocumentValidationResult) o;
    return Objects.equals(this.fileFormatExtension, autodetectDocumentValidationResult.fileFormatExtension) &&
        Objects.equals(this.documentIsValid, autodetectDocumentValidationResult.documentIsValid) &&
        Objects.equals(this.errorCount, autodetectDocumentValidationResult.errorCount) &&
        Objects.equals(this.warningCount, autodetectDocumentValidationResult.warningCount) &&
        Objects.equals(this.errorsAndWarnings, autodetectDocumentValidationResult.errorsAndWarnings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fileFormatExtension, documentIsValid, errorCount, warningCount, errorsAndWarnings);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AutodetectDocumentValidationResult {\n");
    sb.append("    fileFormatExtension: ").append(toIndentedString(fileFormatExtension)).append("\n");
    sb.append("    documentIsValid: ").append(toIndentedString(documentIsValid)).append("\n");
    sb.append("    errorCount: ").append(toIndentedString(errorCount)).append("\n");
    sb.append("    warningCount: ").append(toIndentedString(warningCount)).append("\n");
    sb.append("    errorsAndWarnings: ").append(toIndentedString(errorsAndWarnings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

