/*
 * imageapi
 * Image Recognition and Processing APIs let you use Machine Learning to recognize and process images, and also perform useful image modification operations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cloudmersive.client.rt.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Request to create a PNG of handwriting
 */
@JsonPropertyOrder({
  CreateHandwritingRequest.JSON_PROPERTY_TEXT_INPUT,
  CreateHandwritingRequest.JSON_PROPERTY_TARGET_WIDTH,
  CreateHandwritingRequest.JSON_PROPERTY_STROKE_WIDTH,
  CreateHandwritingRequest.JSON_PROPERTY_COLOR
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-22T03:16:18.398235Z[Etc/UTC]", comments = "Generator version: 7.9.0")
public class CreateHandwritingRequest {
  public static final String JSON_PROPERTY_TEXT_INPUT = "TextInput";
  private String textInput;

  public static final String JSON_PROPERTY_TARGET_WIDTH = "TargetWidth";
  private Integer targetWidth;

  public static final String JSON_PROPERTY_STROKE_WIDTH = "StrokeWidth";
  private Integer strokeWidth;

  public static final String JSON_PROPERTY_COLOR = "Color";
  private String color;

  public CreateHandwritingRequest() {
  }

  public CreateHandwritingRequest textInput(String textInput) {
    
    this.textInput = textInput;
    return this;
  }

  /**
   * Text to convert to handwriting
   * @return textInput
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TEXT_INPUT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTextInput() {
    return textInput;
  }


  @JsonProperty(JSON_PROPERTY_TEXT_INPUT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTextInput(String textInput) {
    this.textInput = textInput;
  }

  public CreateHandwritingRequest targetWidth(Integer targetWidth) {
    
    this.targetWidth = targetWidth;
    return this;
  }

  /**
   * Desired width in pixels of the resulting image
   * @return targetWidth
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TARGET_WIDTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getTargetWidth() {
    return targetWidth;
  }


  @JsonProperty(JSON_PROPERTY_TARGET_WIDTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTargetWidth(Integer targetWidth) {
    this.targetWidth = targetWidth;
  }

  public CreateHandwritingRequest strokeWidth(Integer strokeWidth) {
    
    this.strokeWidth = strokeWidth;
    return this;
  }

  /**
   * Optinoal; Width of the text stroke in pixels; default is 2
   * @return strokeWidth
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_STROKE_WIDTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getStrokeWidth() {
    return strokeWidth;
  }


  @JsonProperty(JSON_PROPERTY_STROKE_WIDTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStrokeWidth(Integer strokeWidth) {
    this.strokeWidth = strokeWidth;
  }

  public CreateHandwritingRequest color(String color) {
    
    this.color = color;
    return this;
  }

  /**
   * HTML hexadecimal color, or HTML common color name (e.g. &#39;black&#39;, &#39;red&#39;), for the handwriting
   * @return color
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_COLOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getColor() {
    return color;
  }


  @JsonProperty(JSON_PROPERTY_COLOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setColor(String color) {
    this.color = color;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateHandwritingRequest createHandwritingRequest = (CreateHandwritingRequest) o;
    return Objects.equals(this.textInput, createHandwritingRequest.textInput) &&
        Objects.equals(this.targetWidth, createHandwritingRequest.targetWidth) &&
        Objects.equals(this.strokeWidth, createHandwritingRequest.strokeWidth) &&
        Objects.equals(this.color, createHandwritingRequest.color);
  }

  @Override
  public int hashCode() {
    return Objects.hash(textInput, targetWidth, strokeWidth, color);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateHandwritingRequest {\n");
    sb.append("    textInput: ").append(toIndentedString(textInput)).append("\n");
    sb.append("    targetWidth: ").append(toIndentedString(targetWidth)).append("\n");
    sb.append("    strokeWidth: ").append(toIndentedString(strokeWidth)).append("\n");
    sb.append("    color: ").append(toIndentedString(color)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

